# coding: utf-8
from scoring import longest_chain
longest_chain(F, -1)
flocs, flens = _
hlocs, hlens = longest_chain(F > alphas, -1)
plt.imshow(hlens)
plt.show()
np.logical_and(hlocs == 0, hlens)
plt.imshow(_)
plt.show()
hlocs[hlocs>0]
hlens[hlocs>0]
_.shape
hlens[hlocs.nonzero()]
hlens[np.nonzeros(hlocs)]
hlens[hlocs.nonzero()]
hlens[hlocs.argwhere()]
hlocs
hlocs > 0
_.shape
(hlocs > 0)*hlens
plt.imshow(_)
plt.show()
np.and(hlocs == 0, hlens == 1)
np.logical_and(hlocs == 0, hlens == 1)
plt.imshow(_)
plt.show()
np.logical_and(hlocs == 0, hlens < 3)
np.logical_and(hlocs == 0, hlens < 10, hlens != 0)
help(np.logical_and)
np.logical_and(hlocs == 0, hlens < 10, hlens != 0)
np.logical_and(hlocs == 0, hlens < 10, hlens != 0)
plt.imshow(_)
plt.show()
np.logical_and(hlocs == 0, hlens < 10, hlens != 0)
hlens
np.logical_and(np.logical_and(hlocs == 0, hlens < 10), hlens != 0)
plt.imshow(_)
plt.show()
np.logical_and(np.logical_and(hlocs == 0, hlens < 20), hlens != 0)
plt.imshow(_)
plt.show()
np.who()
plt.imshow(flocs)
plt.show()
plt.imshow(flens)
plt.show()
plt.imsave('goofy.png', flens[crop], cmap=plt.cm.twilight)
get_ipython().run_line_magic('ls', '')
np.who()
scales
plt.imshow(F[...,:10] > .15)
plt.imshow(np.max(F[...,:10] > .15))
plt.imshow(np.max(F[...,:10] > .15), axis=-1)
plt.imshow(np.max(F[...,:10] > .15, axis=-1))
plt.show()
plt.imshow(np.max(F*(F>.15), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F>.15), axis=-1))
plt.imshow(np.max(F[...,10:-10]*(F>.15).any(), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F>.4).any(), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F>.5).any(), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.5).any(), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.6).any(), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.8), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.7), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.5), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.4), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.3), axis=-1))
plt.show()
plt.imshow(np.max(F[...,10:-10]*(F[...,10:-10]>.25), axis=-1))
plt.show()
plt.imshow(s)
plt.show()
sobel(s)
plt.imshow(_)
plt.show()
plt.imshow(img_raw)
plt.imshow(raw_img)
plt.show()
plt.imshow(raw_img.filled(1))
plt.show()
plt.imshow(raw_img.filled(0))
plt.show()
plt.imshow(raw_img.filled(1))
plt.show()
img_as_float(raw_img)
from skimage.util import img_as_float
img_as_float(raw_img)
plt.imshow(raw_img)
plt.show()
plt.imshow(img_as_float(raw_img))
plt.show()
img_as_float(raw_img.filled(255))
plt.imshow(_)
plt.show()
raw_img
raw_img.data
_.max()
from skimage.io import imread
imread(f'samples/{filename}')
from placenta import open_typefile
open_typefile(filename, 'raw')
raw = _
plt.imshow(raw)
plt.show()
sobel(raw)
sobel(raw[...,1])
plt.imshow(_)
sobel(img_as_float(raw[...,1]))
plt.imshow(_)
plt.show()
import skimage.segmentation as sks
sobel(img_as_float(raw[...,-1]))
sr = _
sks.find_boundaries(sr)
plt.imshow(_)
plt.show()
sr.max()
get_ipython().run_line_magic('pinfo', 'sks.inverse_gaussian_gradient')
img_as_float(img[:,1,:])
img_as_float(raw_img[...,1])
img_as_float(raw_img[:,:,1])
img_as_float(raw[...,1])
rawg = _
plt.imshow(rawg)
plt.show()
plt.imshow(rawg, plt.cm.gray)
plt.show()
sobel(rawg)
sr = _
sr.max()
plt.imshow(sr > .5)
plt.show()
plt.imshow(sr > .2)
plt.show()
sks.inverse_gaussian_gradient(sr)
plt.imshow(_)
plt.show()
m = np.zeros_like(sr)
m
m[0][0] = 1
sks.watershed(image=sr, markers=m)
plt.show()
plt.imshow(_)
plt.show()
m[-1][-1] = 1
m = m.astype('b')
m
ucip_midpoint
m[*ucip_midpoint]
m[ucip_midpoint]
m[ucip_midpoint] = 2
sks.watershed(image=sr, markers=m)
plt.imshow(_)
plt.show()
sks.watershed(sr > .1, markers=m)
plt.show()
plt.imshow(_)
plt.show()
sr > .1
plt.imshow(_)
plt.show()
sr > .05
plt.imshow(_)
plt.show()
plt.imshow(sr > .05)
plt.show()
plt.imshow(sr > .02)
plt.show()
plt.imshow(sr > .03)
plt.show()
ucip_mask
plt.imshow(_)
plt.show()
plt.imshow(img.mask)
plt.show()
sks.find_boundaries(sks)
sks.find_boundaries(img.mask)
plt.imshow(_)
plt.show()
plt.imshow(np.dstack((sr > .05), sks.find_boundaries(img.mask), np.ones_like(img.mask)).astype('f'))
plt.imshow(np.dstack(((sr > .05), sks.find_boundaries(img.mask), np.ones_like(img.mask))).astype('f'))
plt.show()
plt.imshow(np.dstack(((sr > .05), sks.find_boundaries(img.mask), np.ones_like(img.mask))).astype('f'))
plt.show()
get_ipython().run_line_magic('pinfo', 'sks.morphological_geodesic_active_contour')
img.mask*(sr > .05)
plt.imshow(_)
plt.show()
np.invert(img.mask)*(sr > .05)
plt.imshow(_)
plt.show()
from plate_morphology import dilate_boundary
dilate_boundary(None, mask=img.mask, radius=20)
plt.imshow(_)
plt.show()
D = dilate_boundary(None, mask=img.mask, radius=20)
S
S = sr > .05
S[np.invert(D)] = 0
plt.imshow(S)
plt.show()
dilate_boundary(None, mask=img.mask, radius=40)
S = sr > .05
S[np.invert(D)] = 0
plt.imshow(S)
plt.show()
dilate_boundary(None, mask=img.mask, radius=50)
D = dilate_boundary(None, mask=img.mask, radius=40)
S = sr > .05
S[np.invert(D)] = 0
plt.imshow(S)
plt.show()
plt.imshow(np.logical_and(D, np.invert(img.mask)))
plt.show()
collar = np.logical_and(D, np.invert(img.mask))
S = sr > .05
plt.imshow(S*collar)
plt.show()
S = sr > .05
D = dilate_boundary(None, mask=img.mask, radius=60)
collar = np.logical_and(D, np.ones_like(img.mask))
plt.imshow(collar)
plt.show()
collar = np.logical_and(D, img.mask)
plt.show()
plt.imshow(collar)
plt.show()
collar = np.logical_or(D, img.mask)
plt.imshow(_)
plt.imshow(np.logical_or(img.mask, D)
)
plt.show()
plt.imshow(np.logical_or(img.mask, D))
plt.show(_)
D = dilate_boundary(None, 20, np.invert(img.mask))
plt.imshow(D)
plt.show()
plt.imshow(img.mask)
plt.show()
D = dilate_boundary(None, 40, np.invert(img.mask))
plt.imshow(D)
plt.show()
D = dilate_boundary(None, 100, np.invert(img.mask))
plt.show()
plt.imshow(D)
plt.show()
D = dilate_boundary(None, 50, np.invert(img.mask))
S = sr > .05
NOT = np.invert
plt.imshow(D)
plt.show()
plt.imshow(S)
plt.show()
plt.imshow(S*NOT(D))
plt.show()
plt.imshow(S*(D))
plt.show()
plt.imshow(S*D)
plt.show()
sks.watershed(S*D)
sks.watershed(S*D, markers=m)
plt.show()
plt.imshow(_)
plt.show()
sks.random_walker(S*D)
sks.random_walker(S*D, m)
plt.imshow(_)
plt.show()
plt.imshow(D)
plt.show()
sks.find_boundaries(D)
plt.show()
plt.imshow(_)
plt.show()
ob = sks.find_boundaries(D)
help(sks.morphological_geodesic_active_contour)
S
S
sr*D
plt.imshow(_)
plt.show()
get_ipython().run_line_magic('pinfo', 'sks.morphological_chan_vese')
sks.morphological_geodesic_active_contour(sr*D, ob)
sks.morphological_geodesic_active_contour(sr*D, 5, level_set=ob)
sks.morphological_geodesic_active_contour(sr*D, 5, levelset=ob)
help(sks.morphological_geodesic_active_contour)
sks.morphological_geodesic_active_contour(sr*D, 5, ob)
plt.imshow(_)
plt.show()
sks.morphological_geodesic_active_contour(sr, 10, ob)
plt.show()
plt.imshow(_)
plt.show()
sks.morphological_chan_vese(sr, 10, ob)
plt.imshow(_)
plt.show()
get_ipython().run_line_magic('pinfo', 'sks.morphological_chan_vese')
help(sks.circle_level_set)
sks.circle_level_set((5,6))
sks.circle_level_set((50,60))
sks.circle_level_set((10,10))
sks.morphological_chan_vese(sr, 10, D)
plt.imshow(_)
plt.show()
sks.morphological_chan_vese(sr, 10, np.invert(D))
plt.imshow(_)
plt.show()
D
sks.morphological_chan_vese(sr, 100, D)
plt.imshow(_)
plt.show()
help(sks.morphological_chan_vese)
sks.morphological_chan_vese(sr, 10, D, lambda1=1, lambda2=5)
plt.imshow(_)
plt.show()
plt.imshow(sr)
plt.show()
sks.morphological_chan_vese(sr*(sr > .05), 10, D, lambda1=1, lambda2=5)
plt.imshow(_)
plt.show()
sks.morphological_chan_vese(sr, 10, D, lambda1=1, lambda2=10)
plt.show()
plt.imshow(_)
plt.show()
sks.morphological_chan_vese(sr, 10, D, lambda1=100, lambda2=10)
plt.show()
plt.imshow(_)
plt.show()
plt.imshow(D)
plt.show()
plt.imshow(D*st)
plt.imshow(D*sr)
plt.show()
E = dilate_boundary(None, radius=40, mask=np.invert(img.mask))
plt.show()
plt.imshow(E*sr)
plt.show()
plt.imshow(E*sr)
plt.show()
sks.morphological_chan_vese(sr*E, 10, E, lambda1=100, lambda2=10)
plt.show()
plt.imshow(_)
plt.show()
plt.imshow(_)
sks.morphological_chan_vese(sr, 10, E, lambda1=100, lambda2=10)
plt.show()
plt.imshow(sr > .05)
plt.show()
plt.imshow(ob)
plt.show()
sk > .05
sr > .05
plt.imshow(_)
plt.show()
D
plt.imshow(D)
plt.show()
d = dilate_boundary(None, radius=20, mask=img.mask)
S = sr > .05
S[d] = 0
plt.imshow(_)
plt.imshow(S)
plt.show()
S
plt.imshow(sr > .05)
plt.show()
plt.imshow(np.logical_and(d, img.mask)
)
plt.show()
inner = np.logical_and(d, np.invert(img.mask))
plt.show()
plt.imshow(inner)
plt.show()
sr*inner
plt.show()
plt.imshow(_)
plt.show()
inner = np.logical_and(d, img.mask)
plt.imshow(inner*sr)
plt.show()
inner = np.logical_and(dilate_boundary(None, radius=40, mask=img.mask), img.mask)
plt.imshow(inner*sr)
plt.show()
plt.imshow(np.invert(inner)*sr)
plt.show()
plt.imshow(np.invert(inner)*sr)
plt.show()
D = dilate_boundary(None, radius=50, mask=np.invert(img.mask))
plt.imshow(D)
plt.show()
D = dilate_boundary(None, radius=50, mask=img.mask)
sr*D
plt.imshow(_)
plt.show()
oD = dilate_boundary(None, radius=50, mask=np.invert(img.mask))
sr*D*oD
plt.imshow(_)
plt.show()
plt.imshow(finv)
plt.show()
plt.imshow(finv.filled(0))
plt.show()
np.who()
plt.imshow(s)
plt.show()
plt.imshow(s.filled(0))
plt.show()
plt.imshow(s.filled(0))
plt.show()
plt.imshow(sr)
plt.show()
cv(sr)
sks.chan_vese(sr)
plt.imshow(_)
plt.show()
help(sks.chan_vese)
sks.chan_vese(rawg, init_level_set='disk', lambda1=1, lambda2=5)
plt.imshow(_)
plt.show()
sks.quickshift(raw)
plt.show()
plt.imshow(_)
plt.show()
plt.imshow(raw % 255)
plt.show()
q = _428
plt.imshow(q % 255)
plt.show()
sr > .2
plt.show()
plt.imshow(sr > .2)
plt.show()
from skimage.morphology import binary_dilation
from skimage.morphology import diamond
diamond(3)
colllar
collar
plt.imshow(_)
plt.show()
collar * img.mask
collar * np.invert(img.mask)
plt.show()
plt.show()
plt.imshow(_)
plt.show()
collar = _449
collar*(sr > .2)
plt.show()
plt.imshow()
plt.imshow(_)
plt.show()
binary_dilation(collar*(sr > .2), selem=diamond(10))
plt.imshow(_)
plt.show()
plt.imshow(Fmax)
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr > .2), selem=diamond(10)))
plt.imshow(Fmax*np.invert(binary_dilation(sr > .2, selem=diamond(10))))
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr > .2, selem=diamond(20))))
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr > .4, selem=diamond(20))))
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr < .4, selem=diamond(20))))
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr > .4, selem=diamond(30))))
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr > .2, selem=diamond(30))))
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr > .2, selem=diamond(20))))
plt.show()
plt.imshow(Fmax*np.invert(binary_dilation(sr > .2, selem=disk(30))))
from skimage.morphology import disk
plt.imshow(Fmax*np.invert(binary_dilation(sr > .2, selem=disk(30))))
plt.show()
# just only get the one that connects with the boundary of the mask
sks.find_boundaries(img.mask)
np.logical_or(sks.find_boundaries(img.mask), np.invert(binary_dilation(sr > .2, selem=disk(30))))
plt.show()
plt.imshow(_)
plt.show()
np.logical_xor(sks.find_boundaries(img.mask), np.invert(binary_dilation(sr > .2, selem=disk(30))))
plt.show()
plt.imshow(_)
plt.show()
Z = imread('zigg.jpg', 'RGB')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('cd', '..')
