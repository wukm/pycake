# coding: utf-8
get_ipython().run_line_magic('run', 'basic.py')
scales = np.logspace(-1.5, 3.5, base=2, num=20); F = np.stack([frangi_from_image(img, sigma, beta, gamma, dark_bg=False, dilation_radius=20, rescale_frangi=True) for sigma in scales])
scales = np.logspace(-1.5, 3.5, base=2, num=20); beta=0.5, gamma=.5; F = np.stack([frangi_from_image(img, sigma, beta, gamma, dark_bg=False, dilation_radius=20, rescale_frangi=True) for sigma in scales])
scales = np.logspace(-1.5, 3.5, base=2, num=20); beta=0.5; gamma=.5; F = np.stack([frangi_from_image(img, sigma, beta, gamma, dark_bg=False, dilation_radius=20, rescale_frangi=True) for sigma in scales])
Fmax = F.max(axis=0)
plt.imshow(Fmax[crop])
plt.show()
G = np.stack([fft_gradient(img,sigma) for sigma in scales])
plt.imshow(G.max(axis=0))
plt.show()
plt.imshow(Fmax / (.1+G.max(axis=0)))
plt.show()
plt.imshow(1 / (.1+G.max(axis=0)))
plt.show()
plt.imshow(1 / (G.max(axis=0)))
plt.show()
plt.imshow(G.max(axis=0))
plt.show()
plt.imshow(dilate_boundary(G.max(axis=0), radius=20, mask=img.mask))
plt.show()
plt.imshow(dilate_boundary(G.max(axis=0), radius=20, mask=img.mask).filled(0))
plt.show()
Gmax = dilate_boundary(G.max(axis=0), radius=20, mask=img.mask).filled(0)
Fmax
Fmax / Gmax
plt.imshow(_)
plt.show()
Gmax
Fmax
Fmax*Gmax
plt.imshow(_)
plt.show()
Fmax/(1+Gmax)
plt.imshow(_)
plt.show()
F
G
plt.imshow((F/G).max(axis=0))
plt.show()
plt.imshow((G/F).max(axis=0))
plt.show()
G.max()
G.min()
G / G.max()
plt.imshow(_.max(axis=0))
plt.show()
Gmax.max()
Gmax / Gmax.max()
plt.imshow(_)
plt.show()
np.percentile(Gmax,20)
np.percentile(Gmax,30)
np.percentile(Gmax,40)
nz_percentile(Gmax,40)
plt.imshow(Gmax > 2.96)
plt.show()
plt.imshow(Gmax < 2.96)
plt.show()
plt.imshow(Gmax < nz_percentile(Gmax,30))
plt.show()
plt.show()
plt.imshow(Gmax < nz_percentile(Gmax,30))
plt.show()
plt.imshow(Fmax * (Gmax < nz_percentile(Gmax, 30)))
plt.show()
plt.imshow((Fmax * (Gmax < nz_percentile(Gmax, 30))) > .2)
plt.show()
plt.imshow((F==0).any(axis=0))
plt.show()
G==0.any(axis=0)
(G==0).any(axis=0)
plt.imshow(_)
plt.show()
plt.imshow((F==0).any(axis=0))
plt.show()
Fmax*(F==0).any(axis=0)
plt.imshow(_)
plt.show()
Fmax*~(F==0).any(axis=0)
plt.imshow(_)
plt.show()
(Fmax*~(F==0).any(axis=0))[crop]
plt.imshow(_)
plt.show()
(Fmax*~(F==0).any(axis=0))[crop]
plt.show()
plt.imshow((Fmax*~(F==0).any(axis=0))[crop])
plt.title(r"$V_{\max}$ where $V_{\sigma} \ne 0 \;\forall\; \sigma$")
plt.show()
mag = plt.cm.plasma
mag.set_bad('k',1)
plt.imshow(ma.masked_where(0,Fmax*~(F==0).any(axis=0))[crop], cmap=mag)
plt.title(r"$V_{\max}$ where $V_{\sigma} \ne 0 \;\forall\; \sigma$")
plt.show()
plt.imshow(ma.masked_array(Fmax,(F==0).any(axis=0))[crop], cmap=mag)
plt.title(r"$V_{\max}$ where $V_{\sigma} \ne 0 \;\forall\; \sigma$")
plt.show()
get_ipython().run_line_magic('clear', '')
Fmax > nz_percentile(Fmax,95)
plt.imshow(_)
plt.show()
plt.imshow(Fmax)
plt.show()
scales
nz_percentile(Fmax,98)
plt.imshow(Fmax > nz_percentile(Fmax,98))
plt.show()
plt.imshow(Fmax > nz_percentile(Fmax,95))
plt.show()
get_ipython().run_line_magic('pinfo', 'np.percentile')
scales = np.logspace(-1.5, 3.2, base=2, num=20); F = np.stack([frangi_from_image(img, sigma, beta, gamma, dark_bg=False, dilation_radius=20, rescale_frangi=True) for sigma in scales])
Fmax = F.max(axis=0)
plt.imshow(Fmax)
plt.show()
plt.imshow(Fmax, cm=mag)
plt.imshow(Fmax[crop], cmap=mag)
plt.show()
plt.imshow(ma.masked_array(Fmax,mask=(img.mask | (F==0).any(axis=0)))[crop], cmap=mag)
plt.show()
plt.imshow(ma.masked_array(Fmax,mask=(img.mask | (F==0).all(axis=0)))[crop], cmap=mag)
plt.show()
plt.imshow(ma.masked_array(F.mean(axis=0),mask=(img.mask | (F==0).all(axis=0)))[crop], cmap=mag)
plt.show()
plt.imshow(ma.masked_array(F.max(axis=0),mask=(img.mask | (F==0).all(axis=0)))[crop], cmap=mag)
plt.imshow(ma.masked_array(F.max(axis=0),mask=(img.mask | (F==0).all(axis=0)))[crop], cmap='nipy_spectral')
plt.show()
plt.imsave('Fmax_basic_demo', ma.masked_array(F.max(axis=0),mask=(img.mask | (F==0).all(axis=0)))[crop], cmap='nipy_spectral')
plt.imsave('Fmax_q98_thresh_demo', F.max(axis=0) > nz_percentile(Fmax, 98), cmap='gray')
plt.imsave('Fmax_basic_demo', Fmax, cmap='gray')
plt.imsave('Fmax_q98_thresh_demo', F.max(axis=0) > nz_percentile(Fmax, 98), cmap='gray')
plt.imsave('Fmax_q98_thresh_demo', (F.max(axis=0) > nz_percentile(F.max(axis=0), 98))[crop], cmap='gray')
plt.imsave('Fmax_q98_thresh_demo', (F.max(axis=0) > nz_percentile(F.max(axis=0), 98))[crop], cmap='gray_r')
plt.imsave('Fmax_q98_thresh_demo', (F.max(axis=0) > nz_percentile(F.max(axis=0), 98))[crop], cmap='gray')
plt.imsave('Fmax_q95_thresh_demo', (F.max(axis=0) > nz_percentile(F.max(axis=0), 95))[crop], cmap='gray')
plt.show()
plt.imsave('Fmax_basic_demo', F.max(axis=0)[crop], cmap='gray')
plt.imshow(img)
plt.show()
plt.imshow(img[crop].filled(0), cmap='gray')
plt.show()
plt.imsave('Fmax_qthresh_demo_img', img[crop].filled(0), cmap='gray')
from skimage.util import montage
