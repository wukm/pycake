# coding: utf-8
plt.imshow(basic.py)
plt.imshow(img.filled(0))
plt.show()
from skimage.filters import scharr
scharr(img)
plt.imshow(_)
plt.show()
scharr(img, mask=img.mask)
plt.imshow(_)
plt.show()
scharr(img, mask=`img.mask)
scharr(img, mask=~img.mask)
plt.imshow(_)
plt.show()
from skimage.filters.rank import enhance_contrast_percentile as ecp
from skimage.morphology import selem
scales = np.logspace(-1.5, 3.5, base=2, num=20)
beta = 0.35
gamma = 0.5
F = np.stack([frangi_from_image(img, sigma, beta, gamma, dark_bg=False, dilation_radius=20, rescale_frangi=True) for sigma in scales])
plt.imshow(F.max(axis=0))
plt.show()
plt.imshow(F[:-2].max(axis=0))
plt.show()
plt.imshow(F[:-2].max(axis=-1))
plt.imshow(F[:-2].max(axis=0))
plt.show()
plt.imshow(F[:-2].max(axis=0))
ecp(F[:-2].max(axis=0), selem=disk(2))
from skimage.morphology import disk
ecp(F[:-2].max(axis=0), selem=disk(2))
plt.imshow(_)
plt.show()
ecp(F[:-2].max(axis=0), selem=disk(3))
plt.show()
plt.imshow(_)
plt.show()
ecp(F[:-2].max(axis=0), selem=disk(3))
ef = _
plt.imshow(ef > .4)
plt.show()
ef.max()
ef.min()
.4*255
plt.imshow(ef > 102)
plt.show()
plt.imshow(ef > 102)
from placenta import open_typefile
open_typefile(filename, 'trace')
from placenta import open_tracefile
open_tracefile(filename)
trace = _
from scoring import confusion
confusion(ef > 102, trace)
plt.show()
confusion(ef > 102, trace)
plt.imshow(_)
plt.show()
confusion(ef > 102, trace)
plt.show()
plt.imshow(_)
plt.show()
mcc
confusion(F.max(axis=0) > .4, trace)
plt.show()
plt.imshow(_)
plt.show()
fig, ax = plt.subplots(ncols=2, nrows=1)
ax[0].imshow(confusion(F.max(axis=0) > .4, trace)[crop])
ax[1].imshow(confusion(ef > 102, trace)[crop])
plt.show()
fig, ax = plt.subplots(ncols=2, nrows=1)
ax[0].imshow(confusion(F.max(axis=0) > .4, trace)[crop])
ax[1].imshow(confusion(ef > 102, trace)[crop])
[a.axis('off') for a in ax]
plt.show()
fig, ax = plt.subplots(ncols=2, nrows=1)
ax[0].imshow(confusion(F[:-2].max(axis=0) > .4, trace)[crop])
ax[1].imshow(confusion(ef > 102, trace)[crop])
[a.axis('off') for a in ax]
plt.show()
F = np.stack([frangi_from_image(img, sigma, beta, gamma, dark_bg=False, dilation_radius=20, rescale_frangi=True, signed_frangi=True) for sigma in scales])
plt.imshow(np.abs(F).max(axis=0)[crop])
plt.show()
absF = np.abs(F).max(axis=0)
eps(absF, selem=disk(3))
epc(absF, selem=disk(3))
ecp(absF, selem=disk(3))
plt.imshow(_)
plt.show()
plt.imshow(ecp > .3)
ecp(absF, selem=disk(3))
eaf = _ / 255
eaf
plt.imshow(eaf / 255)
plt.show()
plt.imshow(eaf > .4)
plt.show()
plt.imshow(eaf > .5)
plt.show()
plt.imshow(eaf > .5)
plt.show()
F[F < 0}.max(axis=0)
F[F < 0).max(axis=0)
F[F < 0].max(axis=0)
plt.show()
plt.imshow(_)
-F[F < 0].max(axis=0)
(-F[F < 0])
plt.imshow(_)
(-F*(F<0)).max(axis=0)
plt.imshow(_)
plt.show()
(-F[:12]*(F<0)).max(axis=0)
(-F[]*(F<0))[:12].max(axis=0)
(-F*(F<0))[:12].max(axis=0)
plt.imshow(_)
plt.show()
(-F*(F<0))[:10].max(axis=0)
plt.show()
plt.imshow(_)
plt.show()
nf = (-F*(F<0))[:10].max(axis=0)
plt.imshow(nf)
plt.show()
plt.imshow(nf+Fmax)
plt.imshow(nf+F[:-2].max(axis=0))
plt.show()
plt.imshow(nf+F[:-4].max(axis=0))
plt.show()
ecp(nf+F[:-4].max(axis=0), selem=disk(3))
ecp(max(nf,F[:-4].max(axis=0)), selem=disk(3))
help(np.max)
get_ipython().run_line_magic('pinfo', 'np.choose')
get_ipython().run_line_magic('pinfo', 'np.take')
get_ipython().run_line_magic('pinfo', 'np.maximum')
ecp(np.maximum(nf,F[:-4].max(axis=0)), selem=disk(3))
plt.imshow(_)
plt.show()
ecp(np.maximum(nf,F[:-4].max(axis=0))[crop], selem=disk(3))
plt.show()
plt.imshow(_)
plt.show()
np.maximum(nf,F[:-4].max(axis=0))[crop]
plt.imshow(_)
plt.show()
np.maximum(nf,F[:-4].max(axis=0))[crop]
plt.imshow(_)
plt.show()
spine = F[:-4].max(axis=0)
margins = nf
np.maximum(spine,margins)
np.maximum(spine,margins)*~img.mask
c = _
plt.imshow(c)
plt.show()
np.maximum(spine,margins)
plt.ismhow(_)
plt.show()
plt.imshow()
plt.imshow(c)
plt.show()
c = ma.masked_array(np.maximum(spine,margins), mask=img.mask)
plt.imshow(c)
plt.show()
dilate_boundary(c, radius=20)
plt.imshow(_)
plt.show()
c = ma.masked_array(np.maximum(spine,margins), mask=img.mask)
dilate_boundary(c, 20).filled(0)
c = _
plt.imshow(c)
plt.show()
epc(c, disk(4))
ecp(c, disk(4))
plt.imshow(_)
plt.show()
spine
spine*img.mask
spine*~img.mask
plt.imshow(_)
plt.show()
dilate_boundary(spine, mask=img.mask, radius=20)
plt.imshow(_)
plt.show()
spine = dilate_boundary(spine, mask=img.mask, radius=20).filled(0)
plt.imshow(spine[crop])
plt.show()
from skimage.segmentation import thin
from skimage.morphology import thin
thin(spine)
plt.imshow(_)
plt.show()
ecp(spine, disk=3)
ecp(spine, disk(3))
plt.imshow(_)
plt.show()
ecp(spine, disk(3) > 102)
plt.imshow(_)
plt.show()
ecp(spine, disk(3)) > 102
plt.imshow(_)
plt.show()
bspine = ecp(spine, disk(3)) > 102
plt.imshow(thin(bspine))
plt.show()
plt.imshow(np.maximum(margins, bspine))
plt.show()
plt.imshow(np.maximum(margins, bspine))
plt.show()
plt.imshow(np.maximum(margins*255, bspine))
plt.show(_)
plt.imshow(np.maximum(margins*255, bspine))
plt.show()
plt.imshow(np.maximum(margins, bspine))
plt.show()
plt.imshow(np.maximum(margins, thin(bspine)))
plt.show()
margins
plt.imshow(margins)
plt.show()
margins > .2
plt.imshow(_)
plt.show()
margins > .15
plt.ishow()
plt.imshow()
plt.imshow(margins > .1)
plt.show()
plt.imshow(margins > .05)
plt.show()
D = np.zeros(margins, np.bool)
D = np.zeros(margins.shape, np.bool)
from scipy.ndimage import distance_transform_edt
from scipy.ndimage import distance_transform_edt as edt
D[thin(bspine)] = 1
D[:] = 1
D[margins>.05] = 0
plt.imshow(_)
pl.timshow(D)
plt.imshow(D)
plt.show()
edt(D)
spine_dists = D.copy()
spine_dists[~thin(bspine)] = 0
plt.imshow(spine_dists)
plt.show()
spine_dists = edt(D)
spine_dists[~thin(bspine)] = 0
plt.imshow(spine_dists)
plt.show()
spine_dists<=10
plt.imshow(_)
plt.show()
(spine_dists<=10) & (spine_dists > 0)
plt.show()
plt.imshow()
plt.imshow(_255)
plt.show()
(spine_dists<=6) & (spine_dists > 0)
plt.imshow(_)
plt.show()
from skimage.morphology import binary_dilation
help(np.round)
help(np.around)
help(np.fix)
spine_radii = np.round(spine_dists).astype('int')
plt.imshow(spine_radii)
plt.shwo()
plt.show()
\plt.imshow(spine_radii)
np.stack([binary_dilation(spine_radii==r, selem=disk(r)) for r in range(1,10)])
dilstack = _
plt.imshow(dilstack.max(axis=0))
plt.show()
confusion(dilstack.max(axis=0), trace)
plt.show()
plt.imshow(_)
plt.show()
np.stack([binary_dilation(spine_radii==r, selem=disk(r)) for r in range(1,12)])
plt.imshow(_)
dilstack = np.stack([binary_dilation(spine_radii==r, selem=disk(r)) for r in range(1,12)])
plt.imshow(dilstack.any(axis=0))
plt.show()
confusion(dilstack.any(axis=0), approx)
confusion(dilstack.any(axis=0), trace)
plt.show()
plt.imshow(_)
plt.show()
dilstack = np.stack([binary_dilation(spine_radii==r, selem=disk(r)) for r in range(1,15)])
plt.imshow(confusion(dilstack.any(axis=0), trace))
plt.show()
from scoring import mcc
approx = dilstack.any(axis=0)
mcc(approx, trace, bg_mask=img.mask, return_counts=True)
counts = _[1]
TP, TN, FP, FN = counts
precision = TP / (TP+FN)
precision
precision = TP / (TP+FP)
precision
