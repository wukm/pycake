# coding: utf-8
get_ipython().run_line_magic('cd', 'pycake')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'extract_NCS_pcsvn.py')
from scoring import scale_to_width_plots
indices = list(range(20))
B = [indices[:6]] + indices[6:]
scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13))
B = [indices[:8]] + indices[8:]
scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13))
B
len(flat(B))
np.array(B)
np.array(B).flatten()
from importlib import reload
reload(scoring)
reload(scale_to_width_plots)
import scoring
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13))
reload(scoring)
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13))
reload(scoring)
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13))
reload(scoring)
reload(scoring)
reload(scoring)
reload(scoring)
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13))
B = [indices[:6],indices[6:8], *indices[8:]]
B
B = [indices[:6],indices[6:8], *indices[8:], indices[9:-3], indices[-3:]]
B
B = [indices[:6],indices[6:8], indices[8:9], *indices[9:-3], indices[-3:]]
B
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13))
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13), cmap='viridis')
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13), cmap='viridis_r')
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,13), cmap='magma')
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=B, style='ggplot', figsize=(13,20), cmap='magma')
B
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=None, style='ggplot', figsize=(13,20), cmap='magma')
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,20), cmap='magma')
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,20))
reload(scoring)
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,20))
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,20), cmap='tab20c')
scoring.scale_to_width_plots(V > .3, np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,20), cmap='tab20b')
fig.savefig('test-scale-width.png')
fig, ax = _
fig.savefig('test-scale-width.png')
scoring.scale_to_width_plots(V > alphas, np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(6.5,8), cmap='tab20b')
scoring.scale_to_width_plots(V > ALPHAS, np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(6.5,8), cmap='tab20b')
scoring.scale_to_width_plots(V > ALPHAS[...,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(6.5,8), cmap='tab20b')
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(6.5,8), cmap='tab20b')
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,13), cmap='tab20b')
fig, ax = _
a = ax[0]
get_ipython().run_line_magic('pinfo', 'a.set_xmargin')
get_ipython().run_line_magic('pinfo', 'a.set_xlims')
get_ipython().run_line_magic('pinfo', 'a.set_xlim')
reload(scoring)
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,13), cmap='tab20b')
reload(scoring)
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,13), cmap='tab20b')
fig, ax = _
a = ax[0]
get_ipython().run_line_magic('pinfo', 'fig.legend')
reload(scoring)
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,13), cmap='tab20b')
reload(scoring)
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,13), cmap='tab20b')
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,13), cmap='tab20b')
reload(scoring)
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='seaborn-paper', figsize=(13,13), cmap='tab20b')
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='dark_background', figsize=(13,13), cmap='tab20b')
scoring.scale_to_width_plots(V > ALPHAS[...,None,None], np.argmax(V, axis=0), widths, scales, bunches=None, style='dark_background', figsize=(13,13), cmap='tab20b')
reload(scoring)
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize+true)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True)
get_ipython().run_line_magic('debug', '')
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True)
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True)
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True)
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True)
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True)
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True)
reload(scoring)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, style='seaborn-paper')
plt.style.available
plt.style.use('ggplot')
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, style='seaborn-paper')
plt.style.reload_library()
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, style='seaborn-paper')
plt.style.use('ggplot')
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, style='seaborn-paper')
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, style='dark_background')
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, style='dark_background', cmap='viridis')
plt.imshow(V.argmax(axis=0)*trace)
plt.imshow(V.argmax(axis=0)*trace)
mpl.rcParams
import matplotlib as mpl
mpl.rcParams
get_ipython().run_line_magic('matplotlib', 'inline')
inline_rc = dict(mpl.rcParams)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, cmap='viridis')
mpl.rcParams.update(mpl.rcParamsDefault)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, cmap='viridis')
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, cmap='viridis', style='seaborn-paper')
plt.imshow(V.argmax(axis=0)*trace)
plt.imshow((V.argmax(axis=0)*trace)[crop])
plt.imshow((V.argmax(axis=0)*trace)[crop])
plt.colorbar()
plt.imshow(V.argmax(axis=0)*trace, cmap='plasma')
c = plt.cm.plasma
c.set_bad()
Vm = V.argmax(axis=0)
Vm = V.argmax(axis=0)*trace
ma.masked_array(Vm, img.mask)
Vm = _
plt.imshow(Vm)
ma.masked_array(Vm, img.mask, cmap=c)
Vm = ma.masked_array(Vm, img.mask)
plt.imshow(Vm, cmap=c)
ma.masked_array(Vm, mask=~approx)
Vm = _
Vm = ma.masked_array(V.argmax(axis=0), mask=~trace)
plt.imshow(Vm, cmap=c)
plt.imshow(Vm[crop], cmap=c)
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, cmap='viridis', style='seaborn-paper')
scoring.scale_to_argmax_plot(V.argmax(axis=0), widths, scales, normalize=True, cmap='plasma')
c.set_bad((1,1,1,1))
plt.imshow(Vm[crop], cmap=c)
scoring.scale_to_argmax_plot(V.argmax(axis=0)*approx, widths, scales, normalize=True, cmap='plasma')
scoring.scale_to_argmax_plot(V.argmax(axis=0)*approx_FA, widths, scales, normalize=True, cmap='plasma')
scoring.scale_to_argmax_plot(V.argmax(axis=0)*approx_rw, widths, scales, normalize=True, cmap='plasma')
scoring.scale_to_argmax_plot(V.argmax(axis=0)*approx, widths, scales, normalize=True, cmap='plasma')
plt.imsave('frangi_argmax-trace', Vm[crop], cmap=c)
Vma = ma.masked_array(Vm, mask=~approx)
plt.imsave('frangi_argmax-trace-approx', Vma[crop], cmap=c)
